directive @goTag(key: String!, value: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @requireAuth(token: String) on FIELD_DEFINITION

type Activity {
  activityType: ActivityType!
  courseContentID: ID
  courseID: ID!
  createdAt: Time
  deletedAt: Time
  id: ID!
  updatedAt: Time
  userID: ID!
}

enum ActivityType {
  ASSIGNMENT_GRADE_RECEIVED
  ASSIGNMENT_SUBMITTED
  COURSE_COMPLETED
  COURSE_ENROLLED
  COURSE_PROGRESS
  COURSE_VIEW
  FORUM_COMMENT_CREATED
  FORUM_COMMENT_UPDATED
  FORUM_POST_CREATED
  FORUM_POST_UPDATED
  GRADE_RECEIVED
  MEDIA_INTERACTION
  PAGE_VIEW
  QUIZ_GRADE_RECEIVED
  QUIZ_TAKEN
  RESOURCE_ACCESSED
}

enum AllowedModel {
  ACTIVITY
  ANSWER_CHOICE
  COURSE
  COURSE_CONTENT
  FILE
  FORUM
  FORUM_COMMENT
  FORUM_POST
  GRADE
  MATCHING_PAIR
  NOTIFICATION
  QUESTION
  QUIZ
  SUBMISSION
  TARGET
  USER
}

enum AllowedPermission {
  CREATE
  DELETE
  GRANT_PERMISSIONS
  READ
  REVOKE_PERMISSIONS
  UPDATE
  UPDATE_PERMISSIONS
}

type Answer {
  choices: [AnswerChoice!]!
  createdAt: Time!
  feedback: String!
  id: ID!
  isCorrect: Boolean!
  pointsAwarded: Int!
  questionId: ID!
  updatedAt: Time!
  value: String!
  weight: Int!
}

type AnswerChoice {
  feedback: String!
  id: ID!
  isCorrect: Boolean!
  text: String!
  weight: Int!
}

input AnswerChoiceInput {
  feedback: String!
  id: ID!
  isCorrect: Boolean!
  text: String!
  weight: Int!
}

input AnswerInput {
  choices: [AnswerChoiceInput!]!
  feedback: String!
  isCorrect: Boolean!
  pointsAwarded: Int!
  questionId: ID!
  submission: SubmissionInput!
  value: String!
  weight: Int!
}

scalar Any

type Bonus {
  description: String!
  id: ID!
  name: String!
  percentage: Int!
}

type Course {
  activityIds: [ID!]!
  assignmentIds: [ID!]!
  code: String!
  coverImageUrl: String
  createdAt: Time
  deletedAt: Time
  description: String
  endDate: Time
  forumId: ID!
  gradeIds: [ID!]!
  id: ID!
  instructorIds: [ID!]!
  matricNumber: String!
  programType: ProgramType!
  progress: CourseProgress!
  quizzeIds: [ID!]!
  semester: String!
  shortDescription: String!
  startDate: Time
  status: CourseStatus!
  students: [User!]!
  title: String!
  type: CourseType!
  updatedAt: Time
  userId: String!
  year: String!
}

type CourseProgress {
  assignmentsCompleted: Int!
  lecturesCompleted: Int!
  overallProgress: Int!
  quizzesCompleted: Int!
}

enum CourseStatus {
  COMPLETED
  DELAYED
  IN_PROGRESS
}

enum CourseType {
  LESSONS
  PRACTICUM
  SHORT_COURSE
}

input CreatMediaInput {
  category: String!
  courseID: ID!
  description: String
  file: CreateFileInput!
  mediaType: MediaType!
  title: String!
  userId: ID!
}

input CreateActivityInput {
  activityType: ActivityType!
  courseContentID: ID
  courseID: ID!
  userID: ID!
}

input CreateCourseInput {
  code: String!
  coverImageUrl: String
  description: String
  endDate: Time
  instructorIds: [ID!]!
  programType: ProgramType!
  semester: String!
  shortDescription: String!
  startDate: Time
  status: CourseStatus!
  title: String!
  type: CourseType!
  userId: ID!
}

input CreateEvaluationCriteriaInput {
  isPassFail: Boolean!
  passingScore: Int!
  quizId: ID!
  resubmissionPolicy: ResubmissionPolicy
  weight: Int!
}

input CreateFileInput {
  mimeType: String!
  name: String!
  size: Int!
  url: String!
}

input CreateForumCommentInput {
  content: String!
  courseId: ID!
  files: [ID!]
  parentId: ID!
  postId: ID!
  userId: ID!
}

input CreateForumInput {
  courseId: ID!
  description: String
  name: String!
  tags: [ID!]
}

input CreateForumPostInput {
  content: String!
  courseId: ID!
  files: [ID!]
  forumId: ID!
  tags: [ID!]
  title: String!
  userId: ID!
}

input CreateGradeInput {
  comments: String!
  courseId: ID!
  criteria: String!
  quizId: ID!
  studentId: ID!
  value: Int!
}

input CreateNotificationInput {
  courseId: ID!
  link: String
  recipientId: ID!
  senderId: ID!
  text: String!
  title: String!
  type: NotificationType!
}

input CreateQuestionInput {
  categories: [String!]!
  choices: [AnswerChoiceInput!]!
  correctAnswer: String!
  feedback: String!
  hints: [String!]!
  matchingPairs: [MatchingPairInput!]!
  pointValue: Int!
  randomize: Boolean!
  text: String!
  type: QuestionType!
}

input CreateQuizInput {
  categories: [String!]
  name: String!
  questions: [CreateQuestionInput!]!
  shuffleQuestions: Boolean!
  timeLimit: Int!
}

input CreateTagInput {
  name: String!
}

input CreateTargetInput {
  courseId: ID!
  description: String
  endDate: Time
  name: String!
  startDate: Time
  targetMetric: String!
  targetType: TargetType
  targetValue: Int!
  units: String
}

scalar Date

type EvaluationCriteria {
  bonuses: [Bonus!]!
  createdAt: Time
  deletedAt: Time
  gradingScale: [GradeScale!]!
  id: ID!
  isPassFail: Boolean!
  passingScore: Int!
  penalties: [Penalty!]!
  quizId: ID!
  resubmissionPolicy: ResubmissionPolicy!
  scoreDistribution: [ScoreDistribution!]!
  updatedAt: Time
  weight: Int!
}

type File {
  encoding: String!
  mimetype: String!
  name: String!
  size: Int!
  url: String!
}

type Forum {
  courseId: ID!
  createdAt: Time
  deletedAt: Time
  description: String
  id: ID!
  name: String!
  postIds: [ID!]!
  tagIds: [ID!]!
  updatedAt: Time
}

type ForumComment {
  content: String!
  courseId: ID!
  createdAt: Time
  deletedAt: Time
  downvotes: Int!
  fileIds: [ID!]!
  id: ID!
  parentId: ID!
  postId: ID!
  updatedAt: Time
  upvotes: Int!
  userId: ID!
}

type ForumPost {
  author: ID!
  commentIds: [ID!]!
  content: String!
  courseID: ID!
  createdAt: Time
  deletedAt: Time
  downvotes: Int!
  fileIds: [ID!]!
  forumId: ID!
  id: ID!
  tags: [ID!]!
  title: String!
  updatedAt: Time
  upvotes: Int!
  userId: ID!
}

type GlobalSetting {
  id: ID!
  key: GlobalSettingKeys!
  type: SettingType!
  value: String!
}

enum GlobalSettingKeys {
  ALLOW_COURSE_COMMENTS
  ALLOW_COURSE_DISCOVERY
  ALLOW_STUDENT_MESSAGES
  COURSE_PASSING_GRADE
  DEFAULT_COURSE_TEMPLATE
  DEFAULT_LANGUAGE
  DEFAULT_TIMEZONE
  ENABLE_BADGES
  ENABLE_SSO_LOGIN
  ENROLLMENT_OPEN
  MAX_ENROLLMENT
  SHOW_ALL_COURSES
  SHOW_ANNOUNCEMENTS
  SHOW_COURSE_SCHEDULE
  SHOW_COURSE_TAGS
  SHOW_INSTRUCTOR_INFO
  SHOW_POPULAR_COURSES
  SHOW_RECOMMENDED_COURSES
}

type Grade {
  comments: String!
  courseId: ID!
  createdAt: Time
  criteria: String!
  deletedAt: Time
  id: ID!
  quizId: ID!
  studentId: ID!
  updatedAt: Time
  value: Int!
}

type GradeScale {
  grade: String!
  id: ID!
  maxScore: Int!
  minScore: Int!
}

scalar Int64

type MailInput {
  attachmentUrl: String
  content: Any
  id: ID!
  subject: String!
  template: String!
  to: [String!]!
}

type MatchingPair {
  id: ID!
  left: String!
  question: Question!
  right: String!
}

input MatchingPairInput {
  left: String!
  right: String!
}

type Media {
  category: String!
  createdAt: Time
  deletedAt: Time
  description: String
  duration: Int64!
  file: File!
  id: ID!
  mediaType: MediaType!
  title: String!
  updatedAt: Time
  videoPlayerInfo: VideoPlayerInfo
}

enum MediaType {
  ARCHIVE
  AUDIO
  IMAGE
  OTHERS
  PDF
  PPT
  SPREADSHEET
  TEXT
  VIDEO
  WORD_DOC
}

type Mutation {
  createActivity(input: CreateActivityInput!): Activity
  createCourse(input: CreateCourseInput): Course!
  createEvaluationCriteria(input: CreateEvaluationCriteriaInput!): EvaluationCriteria!
  createForum(input: CreateForumInput!): Forum!
  createForumComment(input: CreateForumCommentInput!): ForumComment!
  createForumPost(input: CreateForumPostInput!): ForumPost!
  createGlobalSetting(input: NewSetting!): GlobalSetting!
  createGrade(input: CreateGradeInput!): Grade
  createMedia(input: CreatMediaInput!): Media
  createNotification(input: CreateNotificationInput!): Notification!
  createQualification(input: NewQualification!, userId: ID!): Qualification
  createQuiz(input: CreateQuizInput!): Quiz
  createReferee(input: NewReferee!, userId: ID!): Referee
  createTag(input: CreateTagInput!): Tag!
  createTarget(input: CreateTargetInput!): Target
  createUser(input: NewUser!): User
  createUserSetting(input: NewSetting!, userId: ID!): UserSetting!
  deleteActivity(id: ID!): Boolean!
  deleteCourse(id: ID!): Course!
  deleteEvaluationCriteria(id: ID!): EvaluationCriteria!
  deleteForum(id: ID!): Forum!
  deleteForumComment(id: ID!): ForumComment!
  deleteForumPost(id: ID!): ForumPost!
  deleteGlobalSetting(id: ID!): Boolean!
  deleteGrade(id: ID!): Boolean!
  deleteManyUsers(ids: [ID!]): User
  deleteMedia(id: ID!): Media
  deleteNotification(id: ID!): Notification!
  deleteQuiz(id: ID!): Boolean!
  deleteTag(id: ID!): Tag!
  deleteTarget(id: ID!): Target
  deleteUser(id: ID!): User
  deleteUserSetting(id: ID!): Boolean!
  grantPermission(input: PermissionInput!): Permission
  revokePermission(input: PermissionInput!): Permission
  submitQuiz(input: SubmissionInput!, quizId: ID!): Submission
  updateActivity(input: UpdateActivityInput!): Activity
  updateCourse(input: Any): Course!
  updateEvaluationCriteria(id: ID!, input: UpdateEvaluationCriteriaInput!): EvaluationCriteria!
  updateForum(id: ID!, input: UpdateForumInput!): Forum!
  updateForumComment(id: ID!, input: UpdateForumCommentInput!): ForumComment!
  updateForumPost(id: ID!, input: UpdateForumPostInput!): ForumPost!
  updateGlobalSetting(id: ID!, input: UpdateSetting!): GlobalSetting!
  updateGrade(id: ID!, input: UpdateGradeInput!): Grade
  updateMedia(input: UpdateMediaInput!): Media
  updateNotification(id: ID!, input: UpdateNotificationInput!): Notification!
  updatePermission(input: PermissionInput!): Permission
  updateProspective(input: UpdateProspective): User
  updateQuiz(id: ID!, input: UpdateQuizInput!): Quiz
  updateTag(id: ID!, input: UpdateTagInput!): Tag!
  updateTarget(id: ID!, input: UpdateTargetInput!): Target
  updateUser(input: Any): User
  updateUserSetting(id: ID!, input: UpdateSetting!): UserSetting!
}

input NewCourse {
  code: String!
  coverImg: String!
  id: ID!
  longDescription: String!
  program: String!
  semester: String!
  shortDescription: String!
  title: String!
  tutors: [ID!]
  type: String!
  userId: ID!
}

input NewQualification {
  degree: String!
  graduationYear: String!
  institution: String!
}

input NewReferee {
  email: String!
  fullName: String!
  phone: String!
  userId: ID!
}

input NewSetting {
  globalKey: GlobalSettingKeys
  type: SettingType!
  userKey: UserSettingKeys
  value: String!
}

input NewUser {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type Notification {
  courseId: ID!
  createdAt: Time!
  deletedAt: Time!
  id: ID!
  link: String
  recipientId: ID!
  seen: Boolean!
  senderId: ID!
  text: String!
  title: String!
  type: NotificationType!
  updatedAt: Time!
}

enum NotificationType {
  ANNOUNCEMENT
  COURSE_UPDATE
  FORUM_UPDATE
  GRADE_UPDATE
  MESSAGE
}

type Penalty {
  description: String!
  id: ID!
  name: String!
  percentage: Int!
}

type Permission {
  id: ID!
  model: AllowedModel!
  permissions: [AllowedPermission!]!
  role: Role!
}

input PermissionInput {
  model: AllowedModel!
  permissions: [AllowedPermission!]!
  role: Role!
}

enum ProctoringMethod {
  AUTOMATED
  MANUAL
  NONE
}

enum ProgramType {
  DIPLOMA
  PGDT
}

type Qualification {
  createdAt: Time
  degree: String!
  deletedAt: Time
  graduationYear: String!
  id: ID!
  institution: String!
  updatedAt: Time
}

type Query {
  activities(courseID: ID): [Activity!]!
  activity(id: ID!): Activity
  allMedia: [Media!]!
  course(id: ID!): Course!
  courses(userId: ID): [Course!]!
  evaluationCriteria(id: ID!): EvaluationCriteria
  evaluationCriterias: [EvaluationCriteria!]!
  forum(id: ID!): Forum
  forumComment(id: ID!): ForumComment
  forumComments(courseId: ID): [ForumComment!]!
  forumPost(id: ID!): ForumPost
  forumPosts(courseId: ID, tags: [ID!]!): [ForumPost!]!
  forums(courseId: ID): [Forum!]!
  getPermissionsForModel(model: AllowedModel!): [Permission!]!
  getPermissionsForUser(userID: ID!): [Permission!]!
  globalSetting(id: ID!): GlobalSetting!
  globalSettings(limit: Int = 25, offset: Int = 0): [GlobalSetting!]!
  grade(id: ID!): Grade
  grades: [Grade!]!
  media(id: ID!): Media
  mediaByType(type: MediaType!): [Media!]!
  notifications(courseId: ID, read: Boolean, recipientId: ID): [Notification!]!
  quiz(id: ID!): Quiz!
  quizzes: [Quiz!]!
  submission(id: ID!): Submission!
  submissions: [Submission!]!
  target(id: ID!): Target
  targets(courseId: ID): [Target!]!
  user(id: ID!): User
  userSetting(id: ID!): UserSetting!
  userSettings(limit: Int = 25, offset: Int = 0, userId: ID!): [UserSetting!]!
  users: [User]
}

type Question {
  categories: [String!]!
  choices: [AnswerChoice!]!
  correctAnswer: String!
  feedback: String!
  hints: [String!]!
  id: ID!
  matchingPairs: [MatchingPair!]!
  pointValue: Int!
  randomize: Boolean!
  text: String!
  type: QuestionType!
}

enum QuestionType {
  ESSAY
  MATCHING
  MULTIPLE_CHOICE
  MULTIPLE_CORRECT
  SHORT_ANSWER
  TRUE_FALSE
}

type Quiz {
  categories: [String!]
  certificate: Boolean!
  courseId: ID!
  createdAt: Time!
  deletedAt: Time!
  description: String!
  dueDate: String!
  duration: Int!
  endTime: Time!
  gradeIds: [ID!]!
  id: ID!
  isLocked: Boolean!
  name: String!
  passingScore: Int!
  proctoringMethod: ProctoringMethod!
  questionIds: [ID!]!
  questions: [Question!]!
  quizType: QuizType!
  randomizeAnswers: Boolean
  randomizeQuestions: Boolean
  resultsReleaseDate: Time
  shuffleQuestions: Boolean!
  startDate: Time!
  startTime: Time!
  submissionIds: [ID]
  timeLimit: Int!
  updatedAt: Time!
  waitTime: Int!
  weight: Int!
}

enum QuizType {
  ASSIGNMENT
  EXAM
}

type Referee {
  createdAt: Time
  deletedAt: Time
  email: String!
  fullName: String!
  id: ID!
  phone: String!
  updatedAt: Time
}

enum RegistrationStatus {
  COMPLETED
  CREATED
  IN_PROGRESS
  REJECTED
}

type Reminder {
  createdAt: Time!
  id: ID!
  message: String!
  sendTime: Time!
  sent: Boolean!
  target: Target!
  updatedAt: Time!
  user: User!
}

enum RepeatInterval {
  DAY
  MONTH
  WEEK
  YEAR
}

enum ResubmissionPolicy {
  ALLOWED
  LIMIT_NUMBER
  LIMIT_TIME
  NOT_ALLOWED
}

enum Role {
  ADMIN
  ALUMNI
  GUEST
  PARTNER
  STUDENT
  SUPER_ADMIN
  SUPPORT
  TEACHER
}

type ScoreDistribution {
  grade: String!
  id: ID!
  maxScore: Int!
  minScore: Int!
  percentage: Int!
}

enum SettingType {
  BOOLEAN
  DATE
  NUMBER
  STRING
  TIME
}

type Submission {
  answers: [Answer!]!
  completedAt: Time!
  createdAt: Time!
  endTime: Time!
  feedback: [String!]
  grade: Float!
  id: ID!
  points: Int!
  quizID: ID!
  startTime: Time!
  startedAt: Time!
  updatedAt: Time!
  userID: String!
  weight: Int!
}

input SubmissionInput {
  answers: [AnswerInput!]!
  endTime: Time!
  feedback: [String!]!
  grade: Float!
  points: Int!
  quiz: UpdateQuizInput!
  startTime: Time!
  startedAt: Time!
  userID: String!
  weight: Int!
}

type Subscription {
  activityAdded: Activity
  activityDeleted: ID
  activityUpdated: Activity
  notificationAdded: Notification!
}

type Tag {
  courseIds: [ID!]!
  id: ID!
  name: String!
  postIds: [ID!]!
}

type Target {
  completionDate: Time
  courseId: ID!
  createdAt: Time
  currentValue: Int
  description: String
  dueDate: Time
  id: ID!
  isCompleted: Boolean!
  name: String!
  reminders: [Reminder]
  repeatEndDate: Time
  repeatInterval: RepeatInterval!
  startDate: Time
  targetMetric: String!
  targetType: TargetType!
  targetValue: Int
  units: String!
  updatedAt: Time
}

enum TargetType {
  MAXIMUM
  MINIMUM
  TARGET
}

scalar Time

input UpdateActivityInput {
  activityType: ActivityType!
  courseContentID: ID
  id: ID!
}

input UpdateCourseInput {
  activityIds: [ID!]
  assignmentIds: [ID!]
  code: String!
  courseContentIds: [ID!]
  coverImageUrl: String
  description: String
  endDate: Time
  forumId: ID
  gradeIds: [ID!]
  id: ID!
  instructorIds: [ID!]!
  matricNumber: String!
  programType: ProgramType!
  quizIds: [ID!]
  semester: String!
  shortDescription: String!
  startDate: Time
  status: CourseStatus!
  studentIds: [ID!]
  title: String!
  type: CourseType!
}

input UpdateEvaluationCriteriaInput {
  isPassFail: Boolean
  passingScore: Int
  quizId: ID
  resubmissionPolicy: ResubmissionPolicy
  weight: Int
}

input UpdateFileInput {
  createdAt: Time
  deletedAt: Time
  encoding: String!
  mimetype: String!
  name: String!
  size: Int!
  updatedAt: Time
  url: String!
}

input UpdateForumCommentInput {
  content: String
  files: [ID!]
}

input UpdateForumInput {
  description: String
  name: String
  tags: [ID!]
}

input UpdateForumPostInput {
  content: String
  files: [ID!]
  tags: [ID!]
  title: String
}

input UpdateGradeInput {
  comments: String!
  courseId: ID!
  criteria: String!
  id: ID!
  quizId: ID!
  studentId: ID!
  value: Int!
}

input UpdateMediaInput {
  category: String!
  description: String
  duration: Int64!
  file: UpdateFileInput!
  id: ID!
  mediaType: MediaType!
  title: String!
  videoPlayerInfo: VideoPlayerInfoInput
}

input UpdateNotificationInput {
  read: Boolean
}

input UpdateProspective {
  address: String
  churchAddress: String
  churchInvolved: String
  churchName: String!
  city: String
  country: String
  dob: String
  email: String
  firstName: String
  godsWorkings: [String!]
  healthConditions: [String]
  healthIssueDescription: String
  lastName: String
  nationality: String
  pastorEmail: String
  pastorName: String
  pastorPhone: String
  phone: String
  platform: String
  program: String
  reason: String!
  salvationBrief: String!
  state: String
  status: RegistrationStatus!
  zip: String
}

input UpdateQuestionInput {
  categories: [String!]!
  choices: [AnswerChoiceInput!]!
  correctAnswer: String!
  feedback: String!
  hints: [String!]!
  id: ID!
  matchingPairs: [MatchingPairInput!]!
  pointValue: Int!
  randomize: Boolean!
  text: String!
  type: QuestionType!
}

input UpdateQuizInput {
  categories: [String!]
  id: ID!
  name: String!
  questions: [UpdateQuestionInput!]
  shuffleQuestions: Boolean!
  timeLimit: Int!
}

input UpdateSetting {
  value: String
}

input UpdateTagInput {
  name: String
}

input UpdateTargetInput {
  courseId: ID
  description: String
  endDate: Time
  name: String
  startDate: Time
  targetValue: Int
  units: String
}

scalar Upload

type User {
  about: String!
  address: String!
  avatarUrl: String!
  churchAddress: String!
  churchInvolved: String!
  churchName: String!
  city: String!
  confirmationMailSentAt: Time
  confirmedAt: Time
  country: String!
  courses: [ID!]
  createdAt: Time
  deletedAt: Time
  dob: String!
  email: String!
  files: [ID!]
  firstName: String!
  fullName: String!
  gender: String!
  godsWorkings: [String!]
  healthConditions: [String!]
  healthIssueDescription: String!
  id: String!
  isVerified: Boolean!
  lastName: String!
  loggedIn: Boolean!
  matricNumber: String!
  middleName: String!
  nationality: String!
  notifications: [Notification!]!
  passwordHash: String!
  passwordSalt: String!
  pastorEmail: String!
  pastorName: String!
  pastorPhone: String!
  permissionIds: [ID!]!
  permissions: [String]
  phone: String!
  platform: String!
  profession: String!
  program: String!
  progress: Int!
  qualifications: [Qualification!]!
  reason: String!
  referees: [Referee!]!
  regNumber: String!
  role: [Role!]!
  salvationBrief: String!
  scholarship: Boolean
  scholarshipReason: String!
  state: String!
  status: RegistrationStatus
  timeZone: String!
  token: String!
  tokenExpiredAt: Int64!
  updatedAt: Time
  username: String!
  wallet: Float!
  zip: String!
}

type UserSetting {
  id: ID!
  key: UserSettingKeys!
  type: SettingType!
  userId: ID!
  value: String!
}

enum UserSettingKeys {
  ALLOW_PUSH_NOTIFICATIONS
  AUTO_ENROLLMENT_ENABLED
  DARK_MODE_ENABLED
  DEFAULT_FONT_SIZE
  DEFAULT_LANGUAGE
  DEFAULT_TIMEZONE
  EMAIL_NOTIFICATIONS_ENABLED
  ENABLE_OFFLINE_MODE
  ENABLE_TTS
  SHOW_COMPLETED_COURSES
  SHOW_COURSE_ACTIVITY_FEED
  SHOW_COURSE_PROGRESS
  SHOW_COURSE_RATINGS
  SHOW_COURSE_REVIEWS
  SHOW_ENROLLED_COURSES_COUNT
  SHOW_INSTRUCTOR_AVAILABILITY
  SHOW_RELATED_COURSES
  SHOW_UNFINISHED_COURSES
}

input VerifyInput {
  code: String!
  email: String!
  password: String
  resend: Boolean
}

type VideoPlayerInfo {
  currentTime: Int
  duration: Int
}

input VideoPlayerInfoInput {
  currentTime: Int
  totalTime: Int
}
